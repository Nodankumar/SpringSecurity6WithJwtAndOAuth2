package com.springsecurity.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SpringSecurityConfiguration {


    @Bean
    SecurityFilterChain securityFileChain(HttpSecurity http) throws Exception {
		
    	return http.csrf(csrfcustomizer -> csrfcustomizer.disable())
    				.authorizeHttpRequests(request -> request.anyRequest().authenticated())
    				.httpBasic(Customizer.withDefaults())
    				//.formLogin(Customizer.withDefaults())
    				.sessionManagement(sessionManagementCustomizer -> sessionManagementCustomizer.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
    				.build(); 
	}
   
    /* 
    @Bean
    UserDetailsService userDetailsService() {
    	
    	UserDetails grogu = User.withDefaultPasswordEncoder()
    									.username("Grogu")
    									.password("Grogu123")
    									.roles("USER").build();
    	UserDetails gojo = User.withDefaultPasswordEncoder()
								.username("Gojo")
								.password("Gojo123")
								.roles("USER").build();
    	System.err.println("gojo.getPassword(): "+gojo.getPassword());
    	
		return new InMemoryUserDetailsManager(grogu, gojo);
    	
    }*/
    
    

}
