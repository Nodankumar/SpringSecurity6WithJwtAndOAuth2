package com.springsecurity.services;

import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;

import org.springframework.security.crypto.keygen.Base64StringKeyGenerator;
import org.springframework.stereotype.Service;
import org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;

@Service
public class JwtService {
	
	private SecretKey secretKey;

	public String generateToken(String username) {
		
		Map<String, Object> claims = new HashMap<String, Object>();
		
		return Jwts.builder()
				.claims()
				.add(claims)
				.subject(username)
				.issuedAt(new Date(System.currentTimeMillis()))
				.expiration(new Date(System.currentTimeMillis()+30 * 60 * 1000))
				.and()
				.signWith(getKey()).compact();	
	}

	private Key getKey() {
		KeyGenerator generator;
		byte[] keybytes;
		try {
			generator = KeyGenerator.getInstance("HMACSHA256");
			SecretKey secretkey = generator.generateKey();
			String secretkeystr = Base64.getEncoder().encodeToString(secretkey.getEncoded());
			keybytes= secretkeystr.getBytes();

		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		
		return Keys.hmacShaKeyFor(keybytes);
		
	}

}
